{
  "benchmarks": [
    {
      "title": "Do stock transactions joined with stock info",
      "generator_files": [ "stock-trans-no-nulls-10m.json", "stock-info-no-nulls-100k.json" ],
      "benchmark": {
          "statements" : [
              {
                  "title" : "check ugp",
                  "file" : "checkugp.py",
                  "timed" : 0
              },

              {
                  "title" : "preamble",
                  "text" : [
                      "import time",
					  "from deephaven.time import now",
					  "from deephaven import agg",
					  "from deephaven.parquet import read",
					  "from deephaven.table import Table",
					  "from deephaven.ugp import exclusive_lock",
                      "tag = 'no-nulls-10m'",
                      "bench_name = 'stock-join-10m-inc'"
                  ],
                  "timed" : 0
              },

              {
                  "title" : "setup metrics",
                  "file" : "before.py",
                  "timed" : 0
              },

              {
                  "title" : "perform join",
                  "text" : [
                      "time_start_ns = time.perf_counter_ns()",
					  
                      "p_stock_info = read('/data/stock-info-no-nulls-100k.parquet')",
			
					  "p_stock_trans = read('/data/stock-trans-no-nulls-10m.parquet').select(formulas=['symbol','price','buys','sells'])",
					  "autotune = jpy.get_type('io.deephaven.engine.table.impl.select.AutoTuningIncrementalReleaseFilter')",
					  "relation_filter = autotune(0, 1000000, 1.0, True)",
			
					  "stock_info = p_stock_info.view(formulas=['symbol', 'description', 'exchange'])",
					  "stock_trans = p_stock_trans.where(relation_filter).view(formulas=['symbol', 'timestamp=now()', 'price', 'buys', 'sells', 'rec_count=1'])",
		
					  "aggs = [",
					  "   agg.avg('AvgPrice=price'), agg.min_('LowPrice=price'), agg.max_('HighPrice=price'),",
					  "   agg.sum_('Buys=buys'), agg.sum_('Sells=sells'), agg.sum_('RecordCount=rec_count')",
					  "]",
		
					  "by = ['symbol', 'description', 'exchange']",
		
					  "formulas = [",
					  "'Symbol=symbol', 'Description=description', 'Exchange=exchange', 'AvgPrice',"
					  "'LowPrice', 'HighPrice', 'Volume=Buys+Sells', 'RecordCount'",
					  "]",
		
					  "stock_volume = stock_trans.join(stock_info, on=['symbol']).agg_by(aggs, by).view(formulas)",
					  "stock_exchange = stock_volume.agg_by([agg.sum_('Volume'), agg.sum_('RecordCount')], by=['Exchange'])",
					  "record_count = stock_exchange.agg_by([agg.sum_('RecordCount')])",
		
					  "relation_filter.start()",
					  "relation_filter.waitForCompletion()",
					  
                      "time_end_ns = time.perf_counter_ns()",
                      "processed_rows = stock_trans.size"
                  ],
                  "timed" : 1
              },

              {
                  "title" : "post processing",
                  "file" : "after.py",
                  "timed" : 0
              },

              {
                  "title" : "session cleanup",
                  "text" : [
                      "del record_count",
                      "del stock_exchange",
					  "del stock_volume",
					  "del stock_trans",
					  "del stock_info",
					  "del relation_filter",
					  "del autotune",
					  "del p_stock_trans",
					  "del p_stock_info"
		  ],
                  "timed" : 0
              }
          ]
      }
    }
  ]
}
